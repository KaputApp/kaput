//
//  KaputStyle.swift
//  KAPUT
//
//  Created by KAPUT on 12/08/2016.
//  Copyright (c) 2016 OPE50. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class KaputStyle : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let lowRed: UIColor = UIColor(red: 0.986, green: 0.101, blue: 0.309, alpha: 1.000)
        static let chargingBlue: UIColor = UIColor(red: 0.165, green: 0.433, blue: 0.984, alpha: 1.000)
        static let kaputBlack: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let shadowColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        static let fullGreen: UIColor = UIColor(red: 0.115, green: 0.881, blue: 0.396, alpha: 1.000)
        static let bloodyOrange: UIColor = UIColor(red: 1.000, green: 0.384, blue: 0.000, alpha: 1.000)
        static let midYellow: UIColor = UIColor(red: 1.000, green: 0.769, blue: 0.157, alpha: 1.000)
        static let shadow: NSShadow = NSShadow(color: KaputStyle.shadowColor, offset: CGSize(width: 10.1, height: 10.1), blurRadius: 0)
        static var imageOfAddButton: UIImage?
        static var addButtonTargets: [AnyObject]?
        static var imageOfDownArrow: UIImage?
        static var downArrowTargets: [AnyObject]?
        static var imageOfBolt: UIImage?
        static var boltTargets: [AnyObject]?
        static var imageOfTrashCan: UIImage?
        static var trashCanTargets: [AnyObject]?
    }

    //// Colors

    open class var lowRed: UIColor { return Cache.lowRed }
    open class var chargingBlue: UIColor { return Cache.chargingBlue }
    open class var kaputBlack: UIColor { return Cache.kaputBlack }
    open class var shadowColor: UIColor { return Cache.shadowColor }
    open class var fullGreen: UIColor { return Cache.fullGreen }
    open class var bloodyOrange: UIColor { return Cache.bloodyOrange }
    open class var midYellow: UIColor { return Cache.midYellow }

    //// Shadows

    open class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    open class func drawLogoKaput() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Screens
        //// Home-Screen-Red
        context!.saveGState()
        context!.setShadow(offset: KaputStyle.shadow.shadowOffset, blur: KaputStyle.shadow.shadowBlurRadius, color: (KaputStyle.shadow.shadowColor as! UIColor).cgColor)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)


        //// LOGO
        //// path-1 Drawing
        context!.saveGState()
        context!.translateBy(x: 86.05, y: 48.65)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)


        context!.restoreGState()


        //// path- Drawing
        let pathPath = UIBezierPath()
        pathPath.move(to: CGPoint(x: 10.75, y: 88.35))
        pathPath.addLine(to: CGPoint(x: 165.09, y: 80.26))
        pathPath.addLine(to: CGPoint(x: 161.35, y: 8.95))
        pathPath.addLine(to: CGPoint(x: 7.01, y: 17.04))
        pathPath.addLine(to: CGPoint(x: 10.75, y: 88.35))
        pathPath.close()
        KaputStyle.kaputBlack.setFill()
        pathPath.fill()
        strokeColor.setStroke()
        pathPath.lineWidth = 7
        pathPath.stroke()


        //// path-3 Drawing
        context!.saveGState()
        context!.translateBy(x: 32.5, y: 51.3)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)


        context!.restoreGState()


        //// path- 2 Drawing
        context!.saveGState()
        context!.translateBy(x: 32.5, y: 51.3)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let path2Path = UIBezierPath(rect: CGRect(x: -12.2, y: -24.7, width: 24.4, height: 49.4))
        KaputStyle.lowRed.setFill()
        path2Path.fill()

        context!.restoreGState()


        //// KAPUT Drawing
        let kAPUTPath = UIBezierPath()
        kAPUTPath.move(to: CGPoint(x: 48.97, y: 69.85))
        kAPUTPath.addLine(to: CGPoint(x: 41.23, y: 70.26))
        kAPUTPath.addLine(to: CGPoint(x: 36.16, y: 50.2))
        kAPUTPath.addLine(to: CGPoint(x: 36.05, y: 50.2))
        kAPUTPath.addLine(to: CGPoint(x: 33.9, y: 70.64))
        kAPUTPath.addLine(to: CGPoint(x: 26.03, y: 71.06))
        kAPUTPath.addLine(to: CGPoint(x: 30.23, y: 30.92))
        kAPUTPath.addLine(to: CGPoint(x: 38.09, y: 30.51))
        kAPUTPath.addLine(to: CGPoint(x: 36.23, y: 48.44))
        kAPUTPath.addLine(to: CGPoint(x: 36.33, y: 48.44))
        kAPUTPath.addLine(to: CGPoint(x: 44.74, y: 30.16))
        kAPUTPath.addLine(to: CGPoint(x: 52.77, y: 29.74))
        kAPUTPath.addLine(to: CGPoint(x: 43.49, y: 48.65))
        kAPUTPath.addLine(to: CGPoint(x: 49.02, y: 68.06))
        kAPUTPath.addLine(to: CGPoint(x: 61.85, y: 29.26))
        kAPUTPath.addLine(to: CGPoint(x: 70.14, y: 28.83))
        kAPUTPath.addLine(to: CGPoint(x: 75.5, y: 68.46))
        kAPUTPath.addLine(to: CGPoint(x: 67.11, y: 68.9))
        kAPUTPath.addLine(to: CGPoint(x: 66.33, y: 62.22))
        kAPUTPath.addLine(to: CGPoint(x: 58.36, y: 62.64))
        kAPUTPath.addLine(to: CGPoint(x: 56.23, y: 69.47))
        kAPUTPath.addLine(to: CGPoint(x: 48.97, y: 69.85))
        kAPUTPath.close()
        kAPUTPath.move(to: CGPoint(x: 65.85, y: 56))
        kAPUTPath.addLine(to: CGPoint(x: 60.3, y: 56.29))
        kAPUTPath.addLine(to: CGPoint(x: 63.13, y: 45.5))
        kAPUTPath.addLine(to: CGPoint(x: 64.61, y: 39.39))
        kAPUTPath.addLine(to: CGPoint(x: 64.71, y: 39.38))
        kAPUTPath.addLine(to: CGPoint(x: 64.97, y: 45.4))
        kAPUTPath.addLine(to: CGPoint(x: 65.85, y: 56))
        kAPUTPath.close()
        kAPUTPath.move(to: CGPoint(x: 84.21, y: 68.01))
        kAPUTPath.addLine(to: CGPoint(x: 85.94, y: 51.45))
        kAPUTPath.addLine(to: CGPoint(x: 87.69, y: 51.47))
        kAPUTPath.addCurve(to: CGPoint(x: 96.84, y: 47.86), controlPoint1: CGPoint(x: 91.38, y: 51.27), controlPoint2: CGPoint(x: 94.43, y: 50.07))
        kAPUTPath.addCurve(to: CGPoint(x: 101.01, y: 39.01), controlPoint1: CGPoint(x: 99.25, y: 45.65), controlPoint2: CGPoint(x: 100.64, y: 42.7))
        kAPUTPath.addCurve(to: CGPoint(x: 101.13, y: 36.25), controlPoint1: CGPoint(x: 101.13, y: 38.02), controlPoint2: CGPoint(x: 101.17, y: 37.1))
        kAPUTPath.addCurve(to: CGPoint(x: 99.72, y: 31.48), controlPoint1: CGPoint(x: 101.03, y: 34.28), controlPoint2: CGPoint(x: 100.56, y: 32.69))
        kAPUTPath.addCurve(to: CGPoint(x: 96.61, y: 28.89), controlPoint1: CGPoint(x: 98.88, y: 30.28), controlPoint2: CGPoint(x: 97.84, y: 29.41))
        kAPUTPath.addCurve(to: CGPoint(x: 92.83, y: 27.93), controlPoint1: CGPoint(x: 95.39, y: 28.38), controlPoint2: CGPoint(x: 94.13, y: 28.05))
        kAPUTPath.addCurve(to: CGPoint(x: 88.72, y: 27.85), controlPoint1: CGPoint(x: 91.54, y: 27.8), controlPoint2: CGPoint(x: 90.17, y: 27.78))
        kAPUTPath.addLine(to: CGPoint(x: 80.54, y: 28.28))
        kAPUTPath.addLine(to: CGPoint(x: 76.35, y: 68.42))
        kAPUTPath.addLine(to: CGPoint(x: 84.21, y: 68.01))
        kAPUTPath.close()
        kAPUTPath.move(to: CGPoint(x: 87.75, y: 34.42))
        kAPUTPath.addLine(to: CGPoint(x: 89.22, y: 34.34))
        kAPUTPath.addCurve(to: CGPoint(x: 92.18, y: 35.19), controlPoint1: CGPoint(x: 90.56, y: 34.27), controlPoint2: CGPoint(x: 91.55, y: 34.55))
        kAPUTPath.addCurve(to: CGPoint(x: 93.22, y: 37.89), controlPoint1: CGPoint(x: 92.81, y: 35.83), controlPoint2: CGPoint(x: 93.16, y: 36.73))
        kAPUTPath.addCurve(to: CGPoint(x: 93.14, y: 39.32), controlPoint1: CGPoint(x: 93.25, y: 38.34), controlPoint2: CGPoint(x: 93.22, y: 38.82))
        kAPUTPath.addCurve(to: CGPoint(x: 91.29, y: 43.52), controlPoint1: CGPoint(x: 92.96, y: 41.24), controlPoint2: CGPoint(x: 92.34, y: 42.64))
        kAPUTPath.addCurve(to: CGPoint(x: 86.61, y: 45.01), controlPoint1: CGPoint(x: 90.25, y: 44.4), controlPoint2: CGPoint(x: 88.68, y: 44.9))
        kAPUTPath.addLine(to: CGPoint(x: 87.75, y: 34.42))
        kAPUTPath.close()
        kAPUTPath.move(to: CGPoint(x: 103.72, y: 27.07))
        kAPUTPath.addLine(to: CGPoint(x: 100.62, y: 56.88))
        kAPUTPath.addCurve(to: CGPoint(x: 100.54, y: 59.37), controlPoint1: CGPoint(x: 100.53, y: 57.76), controlPoint2: CGPoint(x: 100.5, y: 58.59))
        kAPUTPath.addCurve(to: CGPoint(x: 103.51, y: 65.54), controlPoint1: CGPoint(x: 100.69, y: 62.18), controlPoint2: CGPoint(x: 101.68, y: 64.24))
        kAPUTPath.addCurve(to: CGPoint(x: 111.17, y: 67.23), controlPoint1: CGPoint(x: 105.35, y: 66.84), controlPoint2: CGPoint(x: 107.9, y: 67.4))
        kAPUTPath.addCurve(to: CGPoint(x: 117.74, y: 65.77), controlPoint1: CGPoint(x: 113.85, y: 67.09), controlPoint2: CGPoint(x: 116.04, y: 66.6))
        kAPUTPath.addCurve(to: CGPoint(x: 121.63, y: 62.74), controlPoint1: CGPoint(x: 119.44, y: 64.94), controlPoint2: CGPoint(x: 120.74, y: 63.93))
        kAPUTPath.addCurve(to: CGPoint(x: 123.48, y: 59.09), controlPoint1: CGPoint(x: 122.52, y: 61.54), controlPoint2: CGPoint(x: 123.14, y: 60.33))
        kAPUTPath.addCurve(to: CGPoint(x: 124.2, y: 55.11), controlPoint1: CGPoint(x: 123.82, y: 57.86), controlPoint2: CGPoint(x: 124.06, y: 56.53))
        kAPUTPath.addLine(to: CGPoint(x: 127.27, y: 25.83))
        kAPUTPath.addLine(to: CGPoint(x: 119.4, y: 26.24))
        kAPUTPath.addLine(to: CGPoint(x: 116.51, y: 53.93))
        kAPUTPath.addLine(to: CGPoint(x: 116.52, y: 54.03))
        kAPUTPath.addCurve(to: CGPoint(x: 116.14, y: 56.43), controlPoint1: CGPoint(x: 116.39, y: 55.03), controlPoint2: CGPoint(x: 116.27, y: 55.83))
        kAPUTPath.addCurve(to: CGPoint(x: 115.49, y: 58.16), controlPoint1: CGPoint(x: 116.01, y: 57.04), controlPoint2: CGPoint(x: 115.79, y: 57.62))
        kAPUTPath.addCurve(to: CGPoint(x: 114.18, y: 59.47), controlPoint1: CGPoint(x: 115.18, y: 58.71), controlPoint2: CGPoint(x: 114.74, y: 59.14))
        kAPUTPath.addCurve(to: CGPoint(x: 112.01, y: 60.04), controlPoint1: CGPoint(x: 113.61, y: 59.8), controlPoint2: CGPoint(x: 112.89, y: 59.99))
        kAPUTPath.addCurve(to: CGPoint(x: 109.45, y: 59.22), controlPoint1: CGPoint(x: 110.82, y: 60.1), controlPoint2: CGPoint(x: 109.96, y: 59.83))
        kAPUTPath.addCurve(to: CGPoint(x: 108.6, y: 56.62), controlPoint1: CGPoint(x: 108.95, y: 58.61), controlPoint2: CGPoint(x: 108.66, y: 57.74))
        kAPUTPath.addCurve(to: CGPoint(x: 108.8, y: 53.32), controlPoint1: CGPoint(x: 108.57, y: 55.91), controlPoint2: CGPoint(x: 108.63, y: 54.81))
        kAPUTPath.addLine(to: CGPoint(x: 108.87, y: 52.63))
        kAPUTPath.addLine(to: CGPoint(x: 111.59, y: 26.65))
        kAPUTPath.addLine(to: CGPoint(x: 103.72, y: 27.07))
        kAPUTPath.close()
        kAPUTPath.move(to: CGPoint(x: 128.32, y: 25.78))
        kAPUTPath.addLine(to: CGPoint(x: 127.55, y: 33.23))
        kAPUTPath.addLine(to: CGPoint(x: 133.73, y: 32.91))
        kAPUTPath.addLine(to: CGPoint(x: 130.3, y: 65.59))
        kAPUTPath.addLine(to: CGPoint(x: 138.17, y: 65.18))
        kAPUTPath.addLine(to: CGPoint(x: 141.59, y: 32.49))
        kAPUTPath.addLine(to: CGPoint(x: 147.82, y: 32.17))
        kAPUTPath.addLine(to: CGPoint(x: 148.6, y: 24.71))
        kAPUTPath.addLine(to: CGPoint(x: 128.32, y: 25.78))
        kAPUTPath.close()
        kAPUTPath.miterLimit = 4;

        kAPUTPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        kAPUTPath.fill()


        //// Rectangle-59 Drawing
        context!.saveGState()
        context!.translateBy(x: 167.35, y: 44.45)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle59Path = UIBezierPath(rect: CGRect(x: -5.03, y: -12.3, width: 10.05, height: 24.6))
        fillColor4.setFill()
        rectangle59Path.fill()

        context!.restoreGState()




        context!.endTransparencyLayer()
        context!.restoreGState()
    }

    open class func drawCheckSignCanvas() {
        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor4 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Screens
        //// Add-Friends
        //// checkSign
        //// Rectangle-129-Copy-2 Drawing
        let rectangle129Copy2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 43, height: 43))
        KaputStyle.fullGreen.setFill()
        rectangle129Copy2Path.fill()
        strokeColor.setStroke()
        rectangle129Copy2Path.lineWidth = 4
        rectangle129Copy2Path.stroke()


        //// Check Drawing
        let checkPath = UIBezierPath()
        checkPath.move(to: CGPoint(x: 14.96, y: 20.85))
        checkPath.addLine(to: CGPoint(x: 13, y: 22.8))
        checkPath.addLine(to: CGPoint(x: 18.23, y: 28))
        checkPath.addLine(to: CGPoint(x: 30, y: 16.95))
        checkPath.addLine(to: CGPoint(x: 28.04, y: 15))
        checkPath.addLine(to: CGPoint(x: 18.23, y: 24.1))
        checkPath.addLine(to: CGPoint(x: 14.96, y: 20.85))
        checkPath.close()
        checkPath.miterLimit = 4;

        checkPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        checkPath.fill()
    }

    open class func drawBackArrow() {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.79, y: 29.49))
        bezierPath.addLine(to: CGPoint(x: 0.05, y: 15))
        bezierPath.addLine(to: CGPoint(x: 14.79, y: 0.51))
        bezierPath.addLine(to: CGPoint(x: 16.79, y: 2.49))
        bezierPath.addLine(to: CGPoint(x: 4.06, y: 15))
        bezierPath.addLine(to: CGPoint(x: 16.79, y: 27.51))
        bezierPath.addLine(to: CGPoint(x: 14.79, y: 29.49))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 2.07, y: 13.5, width: 25.95, height: 3))
        fillColor.setFill()
        rectanglePath.fill()
    }

    open class func drawNumberOfNotifications(notifColor: UIColor = UIColor(red: 1.000, green: 0.216, blue: 0.380, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Group 8
        context!.saveGState()
        context!.setShadow(offset: KaputStyle.shadow.shadowOffset, blur: KaputStyle.shadow.shadowBlurRadius, color: (KaputStyle.shadow.shadowColor as! UIColor).cgColor)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Group
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -36.38, y: -22.4, width: 72.75, height: 44.8))
                var clipTransformation = CGAffineTransform.identity
        clipTransformation = clipTransformation.translatedBy(x: 37.55, y: 24.45)
        clipTransformation = clipTransformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clipPath.apply(clipTransformation)
        clipPath.addClip()


        //// Rectangle Drawing
        context!.saveGState()
        context!.translateBy(x: 37.55, y: 24.45)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -36.38, y: -22.4, width: 72.75, height: 44.8))
        strokeColor2.setStroke()
        rectanglePath.lineWidth = 10
        rectanglePath.stroke()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 2
        //// Rectangle 3 Drawing
        context!.saveGState()
        context!.translateBy(x: 37.51, y: 24.17)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: -33.56, y: -18.95, width: 67.12, height: 37.91))
        fillColor2.setFill()
        rectangle3Path.fill()

        context!.restoreGState()


        //// Group 3
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(rect: CGRect(x: -36.38, y: -22.4, width: 72.75, height: 44.8))
                var clip3Transformation = CGAffineTransform.identity
        clip3Transformation = clip3Transformation.translatedBy(x: 37.55, y: 24.45)
        clip3Transformation = clip3Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip3Path.apply(clip3Transformation)
        clip3Path.addClip()


        //// Group 4
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 49))
        clip2Path.addClip()


        //// Rectangle 4 Drawing
        context!.saveGState()
        context!.translateBy(x: 37.55, y: 24.45)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -36.38, y: -22.4, width: 72.75, height: 44.8))
        strokeColor2.setStroke()
        rectangle4Path.lineWidth = 10
        rectangle4Path.stroke()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()




        //// Group 5
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 6
        let clip6Path = UIBezierPath(rect: CGRect(x: -7.65, y: -16.48, width: 15.3, height: 32.95))
                var clip6Transformation = CGAffineTransform.identity
        clip6Transformation = clip6Transformation.translatedBy(x: 15.1, y: 25.4)
        clip6Transformation = clip6Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip6Path.apply(clip6Transformation)
        clip6Path.addClip()


        //// Group 6
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath(rect: CGRect(x: 6, y: 8, width: 18, height: 35))
        clip5Path.addClip()


        //// Rectangle 8 Drawing
        context!.saveGState()
        context!.translateBy(x: 15.1, y: 25.4)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle8Path = UIBezierPath(rect: CGRect(x: -12.65, y: -21.48, width: 25.3, height: 42.95))
        notifColor.setFill()
        rectangle8Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 7
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 7
        let clip7Path = UIBezierPath(rect: CGRect(x: -3.15, y: -7.7, width: 6.3, height: 15.4))
                var clip7Transformation = CGAffineTransform.identity
        clip7Transformation = clip7Transformation.translatedBy(x: 75.7, y: 23.15)
        clip7Transformation = clip7Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip7Path.apply(clip7Transformation)
        clip7Path.addClip()


        //// Rectangle 12 Drawing
        context!.saveGState()
        context!.translateBy(x: 75.7, y: 23.15)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: -8.15, y: -12.7, width: 16.3, height: 25.4))
        fillColor.setFill()
        rectangle12Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()
    }

    open class func drawAddButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shadowTint = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.208, green: 0.529, blue: 0.988, alpha: 1.000)

        //// Shadow Declarations
        let shadow2 = NSShadow(color: shadowTint.withAlphaComponent(0.2 * shadowTint.cgColor.alpha), offset: CGSize(width: 250.1, height: 10.1), blurRadius: 0)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -240, y: 0, width: 80, height: 80))
        context!.saveGState()
        context!.setShadow(offset: shadow2.shadowOffset, blur: shadow2.shadowBlurRadius, color: (shadow2.shadowColor as! UIColor).cgColor)
        fillColor.setFill()
        ovalPath.fill()
        context!.restoreGState()



        //// Group
        //// Group 2
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        clipPath.addClip()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        fillColor5.setFill()
        oval2Path.fill()


        context!.endTransparencyLayer()
        context!.restoreGState()




        //// Group 3
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        clip3Path.addClip()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
        strokeColor2.setStroke()
        oval4Path.lineWidth = 10
        oval4Path.stroke()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 61, y: 36.5))
        bezier2Path.addLine(to: CGPoint(x: 43.5, y: 36.5))
        bezier2Path.addLine(to: CGPoint(x: 43.5, y: 19))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 19))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 36.5))
        bezier2Path.addLine(to: CGPoint(x: 19, y: 36.5))
        bezier2Path.addLine(to: CGPoint(x: 19, y: 43.5))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 43.5))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 61))
        bezier2Path.addLine(to: CGPoint(x: 43.5, y: 61))
        bezier2Path.addLine(to: CGPoint(x: 43.5, y: 43.5))
        bezier2Path.addLine(to: CGPoint(x: 61, y: 43.5))
        bezier2Path.addLine(to: CGPoint(x: 61, y: 36.5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true;

        fillColor.setFill()
        bezier2Path.fill()
    }

    open class func drawBigNotif(frame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 119), notifColor: UIColor = UIColor(red: 1.000, green: 0.216, blue: 0.380, alpha: 1.000), batteryLevelLenght: CGFloat = 30.1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)


        //// Subframes
        let group3: CGRect = CGRect(x: frame.minX + floor((frame.width - 19.9) * 0.00737) + 0.5, y: frame.minY + 16, width: frame.width - 20.4 - floor((frame.width - 19.9) * 0.00737), height: floor((frame.height - 16) * 0.87379 + 0.5))


        //// Group 3
        context!.saveGState()
        context!.setShadow(offset: KaputStyle.shadow.shadowOffset, blur: KaputStyle.shadow.shadowBlurRadius, color: (KaputStyle.shadow.shadowColor as! UIColor).cgColor)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 8 Drawing
        
        let Xvalue = group3.minX + floor(group3.width * 0.96643 + 0.2) + 0.3
        
        let Yvalue = group3.minY + floor(group3.height * 0.37111 + 0.1) + 0.4
        
        let heightValue = floor(group3.height * 0.65111 - 0.1) - floor(group3.height * 0.37111 + 0.1) + 0.2
        
        let WidthValue = floor(group3.width * 1.00000 - 0.1) - floor(group3.width * 0.96643 + 0.2) + 0.3
        
        let rectangle8Path = UIBezierPath(rect: CGRect(x: Xvalue , y: Yvalue , width: WidthValue, height: heightValue ))
        
        fillColor.setFill()
        rectangle8Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: group3.minX + floor(group3.width * 0.00000 + 0.5), y: group3.minY + floor(group3.height * 0.00000 + 0.5), width: floor(group3.width * 0.96554 + 0.5) - floor(group3.width * 0.00000 + 0.5), height: floor(group3.height * 1.00000 + 0.5) - floor(group3.height * 0.00000 + 0.5)))
        UIColor.black.setFill()
        rectangle2Path.fill()
        UIColor.white.setStroke()
        rectangle2Path.lineWidth = 5
        rectangle2Path.stroke()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 6.2, y: 19.6, width: (batteryLevelLenght - 14.3), height: 82.6))
        notifColor.setFill()
        rectangle6Path.fill()
    }

    open class func drawDownArrow() {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.09, y: 0))
        bezierPath.addLine(to: CGPoint(x: 13.64, y: 10.45))
        bezierPath.addLine(to: CGPoint(x: 3.18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.18))
        bezierPath.addLine(to: CGPoint(x: 13.64, y: 16.82))
        bezierPath.addLine(to: CGPoint(x: 27.27, y: 3.18))
        bezierPath.addLine(to: CGPoint(x: 24.09, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        bezierPath.fill()
    }

    open class func drawBolt() {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.18, y: 0))
        bezierPath.addLine(to: CGPoint(x: 0, y: 24.96))
        bezierPath.addLine(to: CGPoint(x: 11.36, y: 24.96))
        bezierPath.addLine(to: CGPoint(x: 4.55, y: 45.38))
        bezierPath.addLine(to: CGPoint(x: 25, y: 18.15))
        bezierPath.addLine(to: CGPoint(x: 13.64, y: 18.15))
        bezierPath.addLine(to: CGPoint(x: 18.18, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        bezierPath.fill()
    }

    open class func drawBlockSign() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 4.61, y: 25.82))
        clipPath.addCurve(to: CGPoint(x: 25.82, y: 25.82), controlPoint1: CGPoint(x: 10.46, y: 31.68), controlPoint2: CGPoint(x: 19.96, y: 31.68))
        clipPath.addCurve(to: CGPoint(x: 25.82, y: 4.61), controlPoint1: CGPoint(x: 31.68, y: 19.96), controlPoint2: CGPoint(x: 31.68, y: 10.46))
        clipPath.addCurve(to: CGPoint(x: 4.61, y: 4.61), controlPoint1: CGPoint(x: 19.96, y: -1.25), controlPoint2: CGPoint(x: 10.46, y: -1.25))
        clipPath.addCurve(to: CGPoint(x: 4.61, y: 25.82), controlPoint1: CGPoint(x: -1.25, y: 10.46), controlPoint2: CGPoint(x: -1.25, y: 19.96))
        clipPath.addLine(to: CGPoint(x: 4.61, y: 25.82))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 7.44, y: 22.99))
        clipPath.addCurve(to: CGPoint(x: 7.44, y: 7.44), controlPoint1: CGPoint(x: 3.14, y: 18.7), controlPoint2: CGPoint(x: 3.14, y: 11.73))
        clipPath.addCurve(to: CGPoint(x: 22.99, y: 7.44), controlPoint1: CGPoint(x: 11.73, y: 3.14), controlPoint2: CGPoint(x: 18.7, y: 3.14))
        clipPath.addCurve(to: CGPoint(x: 22.99, y: 22.99), controlPoint1: CGPoint(x: 27.29, y: 11.73), controlPoint2: CGPoint(x: 27.29, y: 18.7))
        clipPath.addCurve(to: CGPoint(x: 7.44, y: 22.99), controlPoint1: CGPoint(x: 18.7, y: 27.29), controlPoint2: CGPoint(x: 11.73, y: 27.29))
        clipPath.addLine(to: CGPoint(x: 7.44, y: 22.99))
        clipPath.close()
        clipPath.addClip()


        //// Rectangle Drawing
        context!.saveGState()
        context!.translateBy(x: 15.2, y: 15.2)
        context!.rotate(by: 45 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -20, y: -20, width: 40, height: 40))
        fillColor.setFill()
        rectanglePath.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 2
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(rect: CGRect(x: -2, y: -12.5, width: 4, height: 25))
                var clip2Transformation = CGAffineTransform.identity
        clip2Transformation = clip2Transformation.translatedBy(x: 15.2, y: 15.2)
        clip2Transformation = clip2Transformation.rotated(by: 45 * CGFloat(M_PI) / 180)

        clip2Path.apply(clip2Transformation)
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        context!.saveGState()
        context!.translateBy(x: 15.2, y: 15.2)
        context!.rotate(by: 45 * CGFloat(M_PI) / 180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -7, y: -17.5, width: 14, height: 35))
        fillColor.setFill()
        rectangle2Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()
    }

    open class func drawTrashCan() {
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4, y: 8))
        bezierPath.addLine(to: CGPoint(x: 4, y: 8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 34))
        bezierPath.addLine(to: CGPoint(x: 4, y: 31))
        bezierPath.addLine(to: CGPoint(x: 29, y: 31))
        bezierPath.addLine(to: CGPoint(x: 26, y: 34))
        bezierPath.addLine(to: CGPoint(x: 26, y: 5))
        bezierPath.addLine(to: CGPoint(x: 29, y: 8))
        bezierPath.addLine(to: CGPoint(x: 4, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4, y: 5))
        bezierPath.addLine(to: CGPoint(x: 29, y: 5))
        bezierPath.addLine(to: CGPoint(x: 29, y: 34))
        bezierPath.addLine(to: CGPoint(x: 4, y: 34))
        bezierPath.addLine(to: CGPoint(x: 4, y: 5))
        bezierPath.addLine(to: CGPoint(x: 4, y: 5))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 10, y: 11, width: 3, height: 17))
        fillColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 15, y: 11, width: 3, height: 17))
        fillColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 5, width: 33, height: 3))
        fillColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 12, y: 0, width: 9, height: 3))
        fillColor.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 10, y: 0, width: 3, height: 7))
        fillColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 20, y: 0, width: 3, height: 7))
        fillColor.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 20, y: 11, width: 3, height: 17))
        fillColor.setFill()
        rectangle7Path.fill()
    }

    open class func drawLaunchViewBolt(notifColor: UIColor = UIColor(red: 1.000, green: 0.216, blue: 0.380, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Group
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
                var clipTransformation = CGAffineTransform.identity
        clipTransformation = clipTransformation.translatedBy(x: 46.25, y: 33.85)
        clipTransformation = clipTransformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clipPath.apply(clipTransformation)
        clipPath.addClip()


        //// Rectangle Drawing
        context!.saveGState()
        context!.translateBy(x: 46.25, y: 33.85)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
        strokeColor2.setStroke()
        rectanglePath.lineWidth = 8.02
        rectanglePath.stroke()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 2
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
                var clip5Transformation = CGAffineTransform.identity
        clip5Transformation = clip5Transformation.translatedBy(x: 46.25, y: 33.85)
        clip5Transformation = clip5Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip5Path.apply(clip5Transformation)
        clip5Path.addClip()


        //// Group 3
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(rect: CGRect(x: 4, y: 6, width: 85, height: 56))
        clip2Path.addClip()


        //// Rectangle 3 Drawing
        context!.saveGState()
        context!.translateBy(x: 46.25, y: 33.85)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
        fillColor2.setFill()
        rectangle3Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 4
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
                var clip4Transformation = CGAffineTransform.identity
        clip4Transformation = clip4Transformation.translatedBy(x: 46.25, y: 33.85)
        clip4Transformation = clip4Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip4Path.apply(clip4Transformation)
        clip4Path.addClip()


        //// Group 5
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(rect: CGRect(x: 4, y: 6, width: 85, height: 56))
        clip3Path.addClip()


        //// Rectangle 5 Drawing
        context!.saveGState()
        context!.translateBy(x: 46.25, y: 33.85)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: -41, y: -25.05, width: 82, height: 50.1))
        strokeColor2.setStroke()
        rectangle5Path.lineWidth = 8.02
        rectangle5Path.stroke()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 6
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 7
        let clip7Path = UIBezierPath(rect: CGRect(x: -8.43, y: -17.32, width: 16.85, height: 34.65))
                var clip7Transformation = CGAffineTransform.identity
        clip7Transformation = clip7Transformation.translatedBy(x: 21.6, y: 35.05)
        clip7Transformation = clip7Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip7Path.apply(clip7Transformation)
        clip7Path.addClip()


        //// Group 7
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 6
        let clip6Path = UIBezierPath(rect: CGRect(x: 12, y: 17, width: 19, height: 36))
        clip6Path.addClip()


        //// Rectangle 9 Drawing
        context!.saveGState()
        context!.translateBy(x: 21.6, y: 35.05)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle9Path = UIBezierPath(rect: CGRect(x: -13.43, y: -22.33, width: 26.85, height: 44.65))
        notifColor.setFill()
        rectangle9Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 8
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 8
        let clip8Path = UIBezierPath(rect: CGRect(x: -3.48, y: -8.62, width: 6.95, height: 17.25))
                var clip8Transformation = CGAffineTransform.identity
        clip8Transformation = clip8Transformation.translatedBy(x: 88.6, y: 32.3)
        clip8Transformation = clip8Transformation.rotated(by: -3 * CGFloat(M_PI) / 180)

        clip8Path.apply(clip8Transformation)
        clip8Path.addClip()


        //// Rectangle 12 Drawing
        context!.saveGState()
        context!.translateBy(x: 88.6, y: 32.3)
        context!.rotate(by: -3 * CGFloat(M_PI) / 180)

        let rectangle12Path = UIBezierPath(rect: CGRect(x: -8.47, y: -13.62, width: 16.95, height: 27.25))
        fillColor.setFill()
        rectangle12Path.fill()

        context!.restoreGState()


        context!.endTransparencyLayer()
        context!.restoreGState()


        //// Group 9
        context!.saveGState()
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 9
        let clip9Path = UIBezierPath()
        clip9Path.move(to: CGPoint(x: 51.95, y: 18.21))
        clip9Path.addLine(to: CGPoint(x: 39.31, y: 35.88))
        clip9Path.addLine(to: CGPoint(x: 47.21, y: 35.88))
        clip9Path.addLine(to: CGPoint(x: 42.47, y: 50.34))
        clip9Path.addLine(to: CGPoint(x: 56.69, y: 31.07))
        clip9Path.addLine(to: CGPoint(x: 48.79, y: 31.07))
        clip9Path.addLine(to: CGPoint(x: 51.95, y: 18.21))
        clip9Path.close()
        clip9Path.usesEvenOddFillRule = true;

        clip9Path.addClip()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 34.3, y: 13.22, width: 27.4, height: 42.15))
        fillColor.setFill()
        rectangle14Path.fill()


        context!.endTransparencyLayer()
        context!.restoreGState()
    }

    open class func drawLittleBat(batteryLevelLenght: CGFloat = 30.1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 0.216, blue: 0.380, alpha: 1.000)

        //// Group
        context!.saveGState()
        context!.setShadow(offset: KaputStyle.shadow.shadowOffset, blur: KaputStyle.shadow.shadowBlurRadius, color: (KaputStyle.shadow.shadowColor as! UIColor).cgColor)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 9, y: 6.5, width: 85.5, height: 49))
        fillColor2.setFill()
        rectangle3Path.fill()
        UIColor.white.setStroke()
        rectangle3Path.lineWidth = 5
        rectangle3Path.stroke()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 12.88, y: 10.62, width: batteryLevelLenght, height: 41))
        fillColor3.setFill()
        rectangle6Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 94.78, y: 21.75, width: 7.95, height: 19.4))
        fillColor.setFill()
        rectangle8Path.fill()


        context!.endTransparencyLayer()
        context!.restoreGState()
    }

    //// Generated Images

    open class var imageOfAddButton: UIImage {
        if Cache.imageOfAddButton != nil {
            return Cache.imageOfAddButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 90, height: 90), false, 0)
            KaputStyle.drawAddButton()

        Cache.imageOfAddButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAddButton!
    }

    open class var imageOfDownArrow: UIImage {
        if Cache.imageOfDownArrow != nil {
            return Cache.imageOfDownArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 17), false, 0)
            KaputStyle.drawDownArrow()

        Cache.imageOfDownArrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfDownArrow!
    }

    open class var imageOfBolt: UIImage {
        if Cache.imageOfBolt != nil {
            return Cache.imageOfBolt!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 45), false, 0)
            KaputStyle.drawBolt()

        Cache.imageOfBolt = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBolt!
    }

    open class var imageOfTrashCan: UIImage {
        if Cache.imageOfTrashCan != nil {
            return Cache.imageOfTrashCan!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 33, height: 34), false, 0)
            KaputStyle.drawTrashCan()

        Cache.imageOfTrashCan = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTrashCan!
    }

    //// Customization Infrastructure

    @IBOutlet var addButtonTargets: [AnyObject]! {
        get { return Cache.addButtonTargets }
        set {
            Cache.addButtonTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: KaputStyle.imageOfAddButton)
            }
        }
    }

    @IBOutlet var downArrowTargets: [AnyObject]! {
        get { return Cache.downArrowTargets }
        set {
            Cache.downArrowTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: KaputStyle.imageOfDownArrow)
            }
        }
    }

    @IBOutlet var boltTargets: [AnyObject]! {
        get { return Cache.boltTargets }
        set {
            Cache.boltTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: KaputStyle.imageOfBolt)
            }
        }
    }

    @IBOutlet var trashCanTargets: [AnyObject]! {
        get { return Cache.trashCanTargets }
        set {
            Cache.trashCanTargets = newValue
            for target: AnyObject in newValue {
                target.perform(NSSelectorFromString("setImage:"), with: KaputStyle.imageOfTrashCan)
            }
        }
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
